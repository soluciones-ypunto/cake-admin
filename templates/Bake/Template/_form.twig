{#
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
<?php
/**
 * Soluciones yPunto. Html5 powered solutions.
 * CakePHP Responsive Template Admin made with Bootstrap 4.
 *
 * @link https://github.com/soluciones-ypunto/cake-admin
 * @copyright Copyright (c) Soluciones yPunto SAS (https://solucionesypunto.com).
 *
 * @var \{{ namespace }}\View\AppView $this
 * @var \{{ modelObject.getEntityClass() }} ${{ singularVar }}
{% for var, entityClass in associationVarOptions %}
 * @var \{{ entityClass }}[]&\Cake\Datasource\ResultSetInterface ${{ var }}
{% endfor %}
 */
?>
{% set fields = Bake.filterFields(fields, schema, modelObject) %}
<?= $this->Form->create(${{ singularVar }}, ['class' => 'ypunto-form']) ?>

<section class="ypunto-form-main">
    <fieldset>
{% for field in mainSectionFields if field not in primaryKey %}
{% if keyFields[field] %}
{% set fieldData = Bake.columnData(field, schema) %}
        <?= $this->Form->control('{{ field }}', ['options' => ${{ keyFields[field] }}, 'custom' => true
    {%- if fieldData.null %}, 'empty' => true{% endif %}
    {%- if true == loop.first %}, 'autofocus'{% endif %}]) ?>
{% elseif field not in ['created', 'modified', 'updated', 'deleted'] %}
{% set fieldData = Bake.columnData(field, schema) %}
{% if fieldData.type in ['date', 'datetime', 'time'] and fieldData.null %}
        <?= $this->Form->control('{{ field }}', ['empty' => true]) ?>
{% else %}
        <?= $this->Form->control('{{ field }}') ?>
{% endif %}
{% endif %}
{% endfor %}
{% if associations.BelongsToMany %}
{% for assocName, assocData in associations.BelongsToMany %}
        <?= $this->Form->control('{{ assocData.property }}._ids', ['options' => ${{ assocData.variable }}]) ?>
{% endfor %}
{% endif %}
    </fieldset>
</section>

<section class="ypunto-form-aside">
{% if sideSectionFields %}
    <div class="card">
        <div class="card-body bg-light">
            <!--
            En esta columna secundaria se ponen campos que no precisan de mucho espacio para ingresarlos,
            por ej.:  números, checboxes, radios, select chicos, etc. También para información de texto breve
            información adicional u opcional, también puede utilizar el espacio para textos de ayuda, aclaraciones
            etc. organizar el formulario mejora la usabilidad y la experiencia de usuario
            -->
            <p class="card-title mb-1"><i class="fas fa-fw fa-question-circle"></i> <?= __('Otros datos') ?></p>
            <p class="text-muted small mb-0">
                <?= __('Complete todos los datos.') ?>

            </p>
        </div>
        <div class="card-body border-top">
            <fieldset>
{% for field in sideSectionFields if field not in primaryKey %}
{% set fieldData = Bake.columnData(field, schema) %}
{% if (fieldData.type == 'boolean') %}
                <?= $this->Form->control('{{ field }}', ['custom' => true]) ?>
{% else %}
                <?= $this->Form->control('{{ field }}') ?>
{% endif %}
{% endfor %}
            </fieldset>
        </div>
    </div>
{% endif %}

    <div class="card ypunto-actions-card">
        <?= $this->element('Entity/actions', ['entity' => ${{ singularVar }}]) ?>

    </div>
</section>
<?= $this->Form->end() ?>
