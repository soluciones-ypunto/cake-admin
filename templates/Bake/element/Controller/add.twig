{#
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
{% set compact = ["'#{singularName}'"] %}

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        ${{ singularName }} = $this->{{ currentModelName }}->newEntity();

        if ($this->request->is('post')) {
            ${{ singularName }} = $this->{{ currentModelName }}->patchEntity(${{ singularName }}, $this->request->getData());

            if ($this->{{ currentModelName }}->save(${{ singularName }})) {
                $this->Flash->success(__('Guardado correctamente!'));

                $destination = ['action' => 'view', ${{ singularName }}->{{ primaryKey }}];
                if ($this->request->getData('_nextAction') === 'add') {
                    $destination = $this->request->getRequestTarget();
                }

                return $this->redirect($destination);
            }

            $this->Flash->error(__('No se pudo guardar. Revise los errores e inténtelo nuevamente.'));
        }

{% set associations = Bake.aliasExtractor(modelObj, 'BelongsTo') %}
{% set associations = associations|merge(Bake.aliasExtractor(modelObj, 'BelongsToMany')) %}

{%- for assoc in associations %}
    {%- set otherName = Bake.getAssociatedTableAlias(modelObj, assoc) %}
    {%- set otherPlural = otherName|variable %}
        ${{ otherPlural }} = $this->{{ currentModelName }}->{{ otherName }}->find('list'); // ->limit(200); Considere establecer un límite
        {{- "\n" }}
    {%- set compact = compact|merge(["'#{otherPlural}'"]) %}
{% endfor %}

{% if associations %}
        if ($this->request->is('get') && ($queryParams = $this->request->getQueryParams())) {
            ${{ singularName }} = $this->{{ currentModelName }}->patchEntity(${{ singularName }}, $queryParams, ['validate' => false]); // @todo agregar fields whitelist

{% for alias, details in assocs %}
{% set assocPluralVar = details.getName()|variable %}
{% set assocForeignKey = details.getForeignKey() %}
{% if details.type == 'manyToOne' %}
            if (${{ singularName }}->{{ assocForeignKey }}) { ${{ assocPluralVar }}->where(['{{ details.getTarget().getAlias() }}.{{ details.getTarget().getPrimaryKey() }}' => ${{ singularName }}->{{ assocForeignKey }}]); }
{% endif %}
{% if details.type == 'manyToMany' %}
            if (!empty(${{ singularName }}->{{ assocPluralVar }})) { ${{ assocPluralVar }}->where(['{{ details.getTarget().getAlias() }}.{{ details.getTarget().getPrimaryKey() }} IN' => Hash::extract(${{ singularName }}->{{ assocPluralVar }}, '{n}.id')]); }
{% endif %}
{% endfor %}
        }
{% endif %}

        $this->set(compact({{ compact|join(', ')|raw }}));
    }
